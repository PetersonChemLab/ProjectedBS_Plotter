def plot_fatbands(element,ylim=[-1,1],xlim=None,band_color='lightcoral',fatband_scale=0.1,figsize=(12,5),savefig_filename=None):
    """
    plot_fatbands is written to plot "fatband"-style band structures from VASP output, specifically from the atom-projected eigenvalues separated into PBAND_{element}_SOC.dat files by Vaspkit option 213, and the KLABELS file generated by the same process. Before this can be run, the input files mentioned above must be generated. This code is dependent on the numpy and matplotlib libraries.
    
    Usage on Unix (running python):
    > import plot_fatbands
    > plot_fatbands.plot_fatbands(element,...)
    
    #######################33
    
    Inputs:
    
    element (string): string name of the element for the projected eigenvalues, corresponding to an existing PBAND_{element}_SOC.dat file.
    
    ylim (list, default [-1,1]): 2-element list giving the lower and upper bound for plotting the band structure
    
    xlim (list, default None): 2-element list giving the left and right bound for plotting the band structure. x values corresponding to high symmetry k-points can be found in the KLABELS file.
    
    band_color (string, default 'lightcoral'): string name of the color for filling in the fatbands. suggested colors include 'lightcoral','lightblue','lightgreen','lightgray', and 'plum'.
    
    fatband_scale (float, default 0.1): float scalar for the width of the fatbands. Larger -> fatter
    
    figsize (tuple, default (12,5)): figure size (w x h)
    
    savefig_filename (string, default None): string name for output file that, if defined, will save the generated plot in the working directory. end filenames with '.png' or '.jpg'
    
    """
    
    import numpy as np
    import matplotlib.pyplot as plt
    
    # open and read PBAND file
    pband_file = open(f'PBAND_{element}_SOC.dat')
    pband_lines = pband_file.readlines()
    nkpts,nbands = int(pband_lines[1][17:21]),int(pband_lines[1][21:25])
    
    # initialize distance, energy, and marker size arrays
    distances, energies, size =np.zeros((nbands,nkpts)),np.zeros((nbands,nkpts)),np.zeros((nbands,nkpts))
    
    # determine the indices in the readlines() output where each new band starts
    band_indices = [2+(nkpts+2)*b for b in range(nbands)]
    
    # store information from PBAND file as variables
    for i,band_index in enumerate(band_indices):
        for j,kpt in enumerate(pband_lines[band_index+1:band_index+nkpts+1]):
            distance   = float(kpt[0:10])
            energy     = float(kpt[10:24])
            s,py,pz,px = float(kpt[24:31]),float(kpt[31:38]),float(kpt[38:45]),float(kpt[45:52])
            dxy,dyz,dz2,dxz,dx2 = float(kpt[52:59]),float(kpt[59:66]),float(kpt[66:73]),float(kpt[73:80]),float(kpt[80:87]) 
            tot        = float(kpt[87:94])
            distances[i][j],energies[i][j] = distance,energy
            size[i][j] = tot
            
    # read in KLABELS file for labels and distances
    klabels_file = open('KLABELS')
    klabels_lines = klabels_file.readlines()
    label_distances = []
    label_labels    = []
    for line in klabels_lines[1:]:
        if line != ' \n':
            label_labels.append(line[:12].strip())
            label_distances.append(float(line[12:24]))
        if line == ' \n': break

    # plot the fat band structure        
    plt.figure(figsize=figsize)
    plt.title(f'{element} Projected Band Structure')
    plt.xlabel('k-path')
    plt.ylabel('Energy (eV)')
    plt.ylim(ylim)
    plt.xticks(ticks=label_distances,labels=label_labels)
    plt.vlines(label_distances,ymin=energies.min(),ymax=energies.max(),alpha=0.3,color='k',linewidth=0.5)
    for band in range(len(energies)):
        plt.fill_between(distances[band],energies[band]+size[band]*fatband_scale,energies[band]-size[band]*fatband_scale,color=band_color,edgecolor='k',linewidth=0.3)   
    if xlim != None: plt.xlim(xlim)
    if xlim == None: plt.xlim(0,distances.max())
    if savefig_filename != None: plt.savefig(f'{savefig_filename}')
    plt.show()